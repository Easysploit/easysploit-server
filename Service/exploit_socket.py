import asyncio
import socket

client_sockets = {}

async def handle_client(client_socket, client_address):
    try:
        await asyncio.get_event_loop().sock_sendall(client_socket, b"Server: Welcome to Easysploit!\n")

        while True:
            data = await asyncio.get_event_loop().sock_recv(client_socket, 1024)
            if not data:
                break
            print(f"Client: {data.decode()}")

        print(f"Connection with {client_address} closed.")
    except KeyboardInterrupt:
        print("Closing client connections...")
        for client_socket in client_sockets.values():
            await asyncio.get_event_loop().sock_sendall(client_socket, b"Server: exit")
    except Exception as e:
        print(f"Error handling client: {e}")
    finally:
        client_socket.close()
        if client_address in client_sockets:
            del client_sockets[client_address]

async def socket_server(host, port):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((host, port))
    server_socket.listen(5)
    server_socket.setblocking(False)
    print(f"Socket server is waiting on {host}:{port}!")
    try:
        while True:
            client_socket, client_address = await asyncio.get_event_loop().sock_accept(server_socket)
            print(f"Connected with {client_address}.")
            global client_sockets
            client_sockets[client_address[0]] = client_socket
            asyncio.create_task(handle_client(client_socket, client_address))
    except KeyboardInterrupt:
        print("Shutting down server...")
    finally:
        server_socket.close()
        for client_socket in client_sockets.values():
            client_socket.close()

async def close_all_clients():
    for client_socket in client_sockets.values():
        await asyncio.get_event_loop().sock_sendall(client_socket, b"Server: exit")